print(mirrored_bar_chart)
# Create a mirrored bar chart using ggplot2
mirrored_bar_chart <- ggplot(data, aes(x = Category, y = Value, fill = Value > 0)) +
geom_bar(stat = "identity", position = "identity", width = 0.5) +
scale_fill_manual(values = c("darkred", "darkgreen"), guide = none) +
coord_flip() + # Flip the coordinates to create a horizontal bar chart
labs(title = "Mirrored Bar Chart", x = "Category", y = "Value") +
theme_minimal()
# Display the mirrored bar chart
print(mirrored_bar_chart)
tree <- data.frame(x = c(-5, 5, 2, 4, 1.5, 3, 0, -3, -1.5, -4, -2, -5,
-0.75, 0.75, 0.75, -0.75),
y = c(1, 1, 3, 3, 5, 5, 7, 5, 5, 3, 3, 1, 0, 0, 1, 1),
part = rep(c("branches", "trunk"), times = c(12, 4)))
baubles <- data.frame(x = c(-1.9, -2.4, 0.5, -0.3, -0.2, -1.3, 0.5,
1.2, -2.2, -1, 1.7, -1.4, -1.4, 0.4, 2.1, 0.4,
-0.8, -3.3, 0.5, -2.2, -0.1, -1.5, 2, 3.9, 1.3,
-1.7, 3.7, 2.8, 1, -0.1, 3.8, -2.9, -1.9, -1.7,
-2.6, -2.3, 0.9, 1, -0.4, 1.5, 1.8, -0.5, -1.4,
-0.4, -0.5, -0.9, -1.7, 0.7, 1.6, 1.2, -0.4, 1,
0.8, 2.3, -2.5, -2, -2.9, -1.4, -1.1, 0.2),
y = c(3, 3.3, 1.2, 4.4, 5.1, 5.2, 1.1, 6, 1.5, 2.4, 1.2,
5.4, 2.2, 3.4, 3.4, 3.8, 3.1, 1.2, 4.3,
1.6, 2.4, 5.4, 4.5, 1.1, 1.3, 5, 1.5, 1.9, 1.7,
5.4, 1.3, 1.1, 2.2, 4, 1.8, 2, 4.6, 1.1, 5.9, 4.4,
2, 1.5, 2, 1.2, 5.3, 3.6, 3.5, 4.5, 5.8, 3, 2.7,
5.3, 3.1, 1.7, 1.6, 2.8, 3.6, 2.2, 2.8,  1.7),
color = sample(c("white", "yellow", "red"), 60, TRUE))
library(ggplot2)
ggplot(tree, aes(x, y)) +
geom_polygon(aes(fill = part)) +
geom_point(data = baubles, aes(color = color), size = 4) +
scale_fill_manual(values = c("green4", "brown4"), name = "Parts of tree") +
scale_color_identity(guide = guide_legend(), labels = c("red bauble",
"white bauble", "yellow bauble"), name = "Decorations") +
theme_minimal(base_size = 20)
# Sample data
sizes <- c(10, 12, 14, 11, 15, 13, 14, 16, 12, 11)
# Calculate mean and 95% confidence interval
mean_and_ci <- t.test(sizes, conf.level = 0.95)
# Print the results
mean_and_ci
install.packages("rim")
Sys.setenv(RIM_MAXIMA_PATH = "C:\maxima-5.47.0\bin\wxmaxima.exe")
Sys.setenv(RIM_MAXIMA_PATH = "C:/maxima-5.47.0/bin/wxmaxima.exe")
Sys.setenv(RIM_MAXIMA_PATH = "C:/maxima-5.47.0/bin/wxmaxima.exe")
maxima.start(restart = FALSE)
library(rim)
maxima.start(restart = FALSE)
maxima.isInstalled()
maxima.get()
setwd("...")
csv_border <- "Border_Crossing_Entry_Data.csv"
data_border <- read.csv(csv_border, sep = ";")
csv_border <- ".../Border_Crossing_Entry_Data.csv"
data_border <- read.csv(csv_border)
csv_border <- "C:/Users/endzi/Desktop/Studia_2/UW/Semestr 3/Machine Learning 2/zfinal project/Border_Crossing_Entry_Data.csv"
data_border <- read.csv(csv_border)
border_head <- head(data_border)
write.csv(border_head)
write.csv(border_head, "C:/Users/endzi/Desktop/Studia_2/UW/Semestr 3/Machine Learning 2/zfinal project/border_head.csv")
rm(list=ls())
getwd()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
910/8031
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
27559 - 24537
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Define the variables
p_0 <- 300000       # Initial price
own_contr <- 0.2    # Own contribution
loan <- (1 - own_contr) * p_0  # Loan calculation
r_b <- 0.07         # Banking interest rate
T <- 36             # Loan term in years
b_prov <- 0.01      # Bank provision
tax_i <- 0.19       # Income tax rate
p_12 <- 360000      # Future price
# Define the monthly payment function
monthly_payment <- function(r_b, loan, T) {
(r_b / 12 * loan) / (1 - (1 + r_b / 12)^(-T * 12))
}
# Define the NPV calculation over the entire term
calculate_NPV <- function(irr, p_0, p_12, own_contr, loan, T, b_prov, tax_i) {
monthly_pmt <- monthly_payment(irr, loan, T)
npv <- -own_contr * p_0 - b_prov * loan
for (t in 1:(T*12)) {
npv <- npv + monthly_pmt / (1 + irr/12)^t
}
npv <- npv + (p_12 - tax_i * (p_12 - p_0)) / (1 + irr/12)^(T*12)
return(npv)
}
# Define a function to find IRR by finding the root of the NPV function
find_IRR <- function(p_0, p_12, own_contr, loan, T, b_prov, tax_i) {
calculate_NPV_at_irr <- function(irr) {
calculate_NPV(irr, p_0, p_12, own_contr, loan, T, b_prov, tax_i)
}
# Check if calculate_NPV_at_irr returns NA for the lower bound
if (is.na(calculate_NPV_at_irr(0))) {
stop("NPV function returns NA for irr = 0. Check the NPV function.")
}
# Use a more reasonable upper bound for irr, like 20%
irr <- uniroot(calculate_NPV_at_irr, lower = 0, upper = 0.2, extendInt = "yes")$root
return(irr * 100)  # Convert to percentage
}
print(find_IRR)
print(irr)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("e1071")
source("C:/Users/endzi/Desktop/Studia_2/UW/Semestr 1 powtÃ³rka/Mikroekonomia/micro exam 2024/maxima to r conversions/lottery 1 q1=q3.R", echo=TRUE)
library(dplyr)
library(ggplot2)
install.packages("shiny")
install.packages("rsconnect")
library(rsconnect)
library(shiny)
library(ggplot2)
library(dplyr)
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
rsconnect::setAccountInfo(name='skzientalak', token='757C42DEC06533F1B2D7DB1DF1E84661', secret='dkwEjZm6HGgYgR9UaS7Dr7VhAF/Y6R5SRLcK4H5M')
library(rsconnect)
rsconnect::deployApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats/app.R')
library(rsconnect)
rsconnect::deployApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
scores <- data.frame(
Player = c('Oscar', 'Daleks', 'Tilo', 'Simon', 'Joe', 'Michael', 'Tony'),
Points = c('8.75', '7.25', '6.25', '6.50', '0', '8', '4')
)
View(scores)
ggplot(scores, aes(x = Points, y = Player))+
geom_bar() +
theme_classic()
ggplot(scores, aes(x = Points, y = Player))+
geom_bar(stat = "identity") +
theme_classic()
ggplot(scores, aes(x = Player, y = Points))+
geom_bar(stat = "identity") +
theme_classic()
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
# Define UI
ui <- fluidPage(
titlePanel("Score Visualization"),
mainPanel(
plotOutput("scorePlot")
)
)
# Define server logic
server <- function(input, output) {
output$scorePlot <- renderPlot({
# Adjusted data frame to order names by score
data <- data.frame(
Name = c('Oscar', 'Daleks', 'Tilo', 'Simon', 'Joe', 'Michael', 'Tony'),
Score = c('8.75', '7.25', '6.25', '6.50', '0', '8', '4')
) %>%
arrange(desc(Score)) %>%
mutate(Name = factor(Name, levels = Name))
# reorder descending
data$Name <- reorder(data$Name, -data$Score)
# Plot with ordered names
ggplot(data, aes(x=Name, y=Score)) +
geom_bar(stat="identity", fill="steelblue") +
labs(x="Name", y="Score", title="Scores by Name") +
theme_classic()
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
# Define UI
ui <- fluidPage(
titlePanel("Score Visualization"),
mainPanel(
plotOutput("scorePlot")
)
)
# Define server logic
server <- function(input, output) {
output$scorePlot <- renderPlot({
# Adjusted data frame to order names by score
data <- data.frame(
Name = c('Oscar', 'Daleks', 'Tilo', 'Simon', 'Joe', 'Michael', 'Tony'),
Score = c('8.75', '7.25', '6.25', '6.50', '0', '8', '4')
) %>%
arrange(desc(Score)) %>%
mutate(Name = factor(Name, levels = Name))
# Plot with ordered names
ggplot(data, aes(x=Name, y=Score)) +
geom_bar(stat="identity") +
geom_text(aes(label=Score, y=Score + 2), vjust=0) +  # Add text just above each bar
labs(x="Name", y="Score", title="Scores by Name") +
theme_classic()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel("Score Visualization"),
mainPanel(
plotOutput("scorePlot")
)
)
View(ui)
# Define server logic
server <- function(input, output) {
output$scorePlot <- renderPlot({
# Adjusted data frame to order names by score
data <- data.frame(
Name = c('Oscar', 'Daleks', 'Tilo', 'Simon', 'Joe', 'Michael', 'Tony'),
Score = c('8.75', '7.25', '6.25', '6.50', '0', '8', '4')
) %>%
arrange(desc(Score)) %>%
mutate(Name = factor(Name, levels = Name))
# Plot with ordered names
ggplot(data, aes(x=Name, y=Score)) +
geom_bar(stat="identity") +
geom_text(aes(label=Score, y=Score + 2), vjust=0) +
labs(x="Name", y="Score", title="Scores by Name") +
theme_classic()
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
# libraries
library(shiny)
library(rsconnect)
library(ggplot2)
library(dplyr)
# Define UI
ui <- fluidPage(
titlePanel("Score Visualization"),
mainPanel(
plotOutput("scorePlot")
)
)
# Define server logic
server <- function(input, output) {
output$scorePlot <- renderPlot({
# Adjusted data frame to order names by score
data <- data.frame(
Name = c('Oscar', 'Daleks', 'Tilo', 'Simon', 'Joe', 'Michael', 'Tony'),
Score = c('8.75', '7.25', '6.25', '6.50', '0', '8', '4')
) %>%
arrange(desc(Score)) %>%
mutate(Name = factor(Name, levels = Name))
# Plot with ordered names
ggplot(data, aes(x=Name, y=Score)) +
geom_bar(stat="identity") +
geom_text(aes(label=Score, y=Score + 2), vjust=0) +
labs(x="Name", y="Score", title="Scores by Name") +
theme_classic()
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
runApp('C:/Users/endzi/Desktop/TI4 Shiny App/TI4_stats')
# PICK 5 plot
data2 <- data.frame(
Faction = c("Arborec", "Argent", "Empyrean", "Ghosts", "Hacan", "Keleres",
"L1Z1X", "Letnev", "Mahact", "Mentak", "Muaat", "Naalu",
"Naaz-Rokha", "Nekro", "Nomad", "Saar", "Sardakk N'Orr", "Sol",
"Titans", "Universities", "Vuil'Raith", "Winnu", "Xxcha", "Yin", "Yssaril"),
Picks = c(0, 1, 1, 0, 3, 0, 1, 1, 0, 1, 2, 2, 2, 0, 1, 0, 1, 3, 1, 0, 0, 1, 0, 0, 0)
)
data_filtered <- data2 %>% filter(Picks > 0)
total_picks <- sum(data_filtered$Picks)
data_filtered$Percentage <- data_filtered$Picks / total_picks * 100
ggplot(data_filtered, aes(x = "", y = Percentage, fill = Faction)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Pick Percentages (Excluding Zero Picks)", x = "", y = "", fill = "Faction") +
theme_void()
ggplot(data_filtered, aes(x = "", y = Percentage, fill = Faction)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_label(aes(label = paste0(round(Percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
labs(title = "Pick Percentages (Excluding Zero Picks)", x = "", y = "", fill = "Faction") +
theme_void()
ggplot(data_filtered, aes(x = "", y = Percentage, fill = Faction)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_label(aes(label = paste0(round(Percentage, 1), "%")), position = position_stack(vjust = 0.6)) +
labs(title = "Pick Percentages (Excluding Zero Picks)", x = "", y = "", fill = "Faction") +
theme_void()
View(data_filtered)
View(data2)
data2
data_filtered$y <- 1
ggplot(data_filtered, aes(x = Faction, y = y, fill = Percentage)) +
geom_tile() +  # Use geom_tile for heatmap squares.
scale_fill_gradient(low = "blue", high = "red", guide = "colourbar", name = "Percentage") +
labs(title = "Pick Percentages (Excluding Zero Picks)", x = "Faction", y = "") +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
data_filtered <- data2 %>% filter(Picks > 0)
total_picks <- sum(data_filtered$Picks)
data_filtered$Percentage <- data_filtered$Picks / total_picks * 100
ggplot(data_filtered, aes(x = "", y = Percentage, fill = Faction)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_label(aes(label = paste0(round(Percentage, 1), "%")), position = position_stack(vjust = 0.6)) +
labs(title = "Pick Percentages (Excluding Zero Picks)", x = "", y = "", fill = "Faction") +
theme_void()
ggplot(data_filtered, aes(x = "", y = Percentage, fill = Faction)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_label(aes(label = paste0(round(Percentage, 1), "%")), position = position_stack(vjust = 0.6)) +
labs(title = "Pick Percentages (Excluding Zero Picks)", x = "", y = "", fill = "Faction") +
theme_void()
ggplot(data_filtered, aes(x = "", y = Percentage, fill = Faction)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_label(aes(label = paste0(round(Percentage, 1), "%"), y = cumsum(Percentage) - 0.5 * Percentage),
position = position_stack(vjust = 1.1)) +
labs(title = "Pick Percentages (Excluding Zero Picks)", x = "", y = "", fill = "Faction") +
theme_void()
ggplot(data_filtered, aes(x = "", y = Percentage, fill = Faction)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_label(aes(label = paste0(round(Percentage, 1), "%")), position = position_stack(vjust = 0.6)) +
labs(title = "Pick Percentages (Excluding Zero Picks)", x = "", y = "", fill = "Faction") +
theme_void()
# AVERAGE SCORE plot
data <- data.frame(
Name = c('Oscar', 'Daleks', 'Tilo', 'Simon', 'Joe', 'Michael', 'Tony'),
Score = c(8.75, 7.25, 6.25, 6.50, 0, 8, 4)  # Ensure these are numeric
) %>%
arrange(desc(Score)) %>%
mutate(Name = factor(Name, levels = Name))
ggplot(data, aes(x=Name, y=Score)) +
geom_bar(stat="identity", fill="royalblue2") +
geom_text(aes(label=Score, y=Score), vjust=-1, size=4) +
labs(x="Name", y="Score", title="Scores by Name") +
theme_pubr()
ggplot(data, aes(x = Name, y = Score)) +
geom_bar(stat = "identity", fill = "royalblue2") +
geom_text(aes(label = Score, y = Score), vjust = -0.3, size = 4) +  # Adjust vjust for better label positioning.
scale_y_continuous(limits = c(0, 10), breaks = 0:10) +  # Extend y-axis to 10.
labs(x = "Name", y = "Score", title = "Scores by Name") +
theme_pubr()  # Apply pubr theme.
wd
getwd()
getwd
getwd()
setwd("C://Users//endzi//Downloads//RR_8")
getwd()
read.csv("review_scores.csv")
```{r, echo=FALSE,include=FALSE}
read.csv("review_scores.csv")
data <- read.csv("review_scores.csv")
View(data)
scores <- read.csv("review_scores.csv")
View(scores)
scores <- read.csv("review_scores.csv", sep = ";")
View(scores)
scores <- read.csv("review_scores.csv", sep = ";")
View(scores)
View(scores)
read.csv("active_players.csv", sep = ";")
players <- read.csv("active_players.csv", sep = ";")
View(players)
View(scores)
View(players)
library(ggplot2)
library(ggpubr)
library(dplyr)
players <- read.csv("active_players.csv", sep = ";")
data <- data %>%
mutate(
Month = as.Date(paste0(Month, " 01"), format="%B %Y %d"),
Peak.active.players = as.numeric(gsub(",", "", Peak.active.players))
)
View(players)
scores <- read.csv("review_scores.csv", sep = ";")
scores <- data.frame(scores)
View(scores)
players <- read.csv("active_players.csv", sep = ";")
players <- data.frame(players)
data <- data %>%
mutate(
Month = as.Date(paste0(Month, " 01"), format="%B %Y %d"),
Peak.active.players = as.numeric(gsub(",", "", Peak.active.players))
)
head(scores)
head(players)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
players <- read.csv("active_players.csv", sep = ";")
players <- players %>%
Month = as.Date(paste0(Month, " 01"), format="%B %Y %d"),
View(players)
source("~/.active-rstudio-document", echo=TRUE)
View(players)
players <- read.csv("active_players.csv", sep = ";")
players <- players %>%
as.Date(players$Month)
View(players)
View(players)
head(players)
View(players)
data$Peak.active.players <- as.numeric(gsub(",", "", data$Peak.active.players))
data$Peak.active.players <- as.numeric(gsub(",", "", data$Peak.active.players))
data$Month <- myd(paste(data$Month, "1"))
rm(data
rm(data)
rm(data)
players <- read.csv("active_players.csv", sep = ";")
players$Month <- myd(paste(players$Month, "1"))
# Transform 'Peak.active.players' from string with commas to numeric
players$Peak.active.players <- as.numeric(gsub(",", "", players$Peak.active.players))
View(players)
